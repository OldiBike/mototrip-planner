MotoTrip Planner - Contexte et Prochaines Étapes1. Contexte du ProjetCe projet est une application web "single-file" (un seul fichier HTML) conçue pour un utilisateur motard. L'objectif est de remplacer sa gestion manuelle de voyages (via des fichiers Excel) par une petite application web privée.2. Objectif PrincipalL'utilisateur organise des voyages à moto et a besoin de :Enregistrer des "Voyages" (ex: "Odyssée des Alpes", "Forêt Noire").Pour chaque voyage, enregistrer des "Étapes" (jours).Chaque étape doit contenir des informations précises basées sur ses fichiers Excel :Nom du Jour (ex: "Jour 1", "Jour 2C")Hôtel (ex: "Epinal - Logis Hôtel Atrium")Prix Double (€)Prix Solo (€)Fichier GPX (ex: "Jour 1")URL de l'hôtel (RateHawk, Booking, etc.)Une fonction "Outil d'Adaptation" qui permet de sélectionner des étapes d'un voyage existant (ex: Jours 1, 3, 5 d'un voyage de 10 jours) et de générer une liste récapitulative pour un nouveau voyage "adapté".3. Technologies UtiliséesHTML5TailwindCSS (importé via CDN)Font Awesome (icônes via CDN)JavaScript (ES6 Module) (toute la logique est dans une balise <script type="module">)Firebase (v11.6.1) pour le backend :Authentication (authentification anonyme ou via Custom Token pour sécuriser les données par utilisateur).Firestore (base de données NoSQL) pour la persistance des données.4. Structure de la Base de Données (Firestore)La structure des données est privée et liée à l'ID de l'utilisateur (userId).Chemin de base : artifacts/{appId}/users/{userId}/...[COLLECTION]
└── trips (collection)
    └── {tripId} (document)
        ├── name: "Odyssée des Alpes"
        ├── createdAt: (Timestamp)
        │
        └── days (sous-collection)
            └── {dayId} (document)
                ├── dayName: "Jour 1"
                ├── hotelName: "Epinal - Logis Hôtel Atrium"
                ├── priceDouble: 115
                ├── priceSolo: 95
                ├── gpxFile: "Jour 1"
                ├── hotelLink: "[https://ratehawk.com/](https://ratehawk.com/)..."
                └── createdAt: (Timestamp) (utilisé pour trier les étapes)
5. État Actuel (Version du 22/10/2025)Corrigé : Le bug d'authentification est résolu. Les formulaires sont désactivés (disabled) jusqu'à ce que l'ID utilisateur (userId) soit confirmé par Firebase.Fonctionnel : CRUD (Ajouter / Lister / Supprimer) pour les Voyages.Fonctionnel : CRUD (Ajouter / Lister / Supprimer) pour les Étapes (liées au voyage sélectionné).Adapté : Le formulaire d'ajout d'étape correspond parfaitement à la structure Excel de l'utilisateur (y compris l'URL de l'hôtel).Fonctionnel : L'outil d'adaptation génère une liste filtrée des étapes sélectionnées.Amélioré : Les alert() et confirm() (qui sont bloquants et ne fonctionnent pas dans l'iframe) ont été remplacés par une modale de confirmation de suppression non-blocante.6. Prochaines Étapes (TODO)1. (Priorité) Implémenter la logique de ré-attribution d'étapeObjectif : Permettre à l'utilisateur de copier ou de déplacer une "Étape" existante d'un "Voyage" (ex: "Alpes 12 jours") vers un autre "Voyage" (ex: "Alpes 8 jours").Implémentation Suggérée :Modifier l'affichage d'une étape (loadDays function) : Ajouter un nouveau bouton (icône "copier" ou "flèche de transfert") à côté du bouton "Supprimer" sur la carte de l'étape.Créer une nouvelle modale (ex: id="reassign-day-modal") :Cette modale doit avoir un titre (ex: "Ré-attribuer l'étape : [Nom de l'étape]").Elle doit contenir une liste (ou un <select>) qui affichera tous les autres voyages disponibles.Elle doit avoir deux boutons d'action : "Copier" et "Déplacer".Logique d'ouverture de la modale :Quand l'utilisateur clique sur le nouveau bouton "Ré-attribuer" (étape 1) :Stocker les données de l'étape sélectionnée dans une variable globale (ex: let stepToReassign = allDaysCache.find(...)).Ouvrir la modale.Charger les voyages : Faire un getDocs sur la collection trips (artifacts/{appId}/users/{userId}/trips) pour récupérer tous les voyages de l'utilisateur.Remplir la liste/select dans la modale avec les noms des voyages (en excluant le currentTripId).Logique des boutons d'action :Bouton "Copier" :Récupérer l'ID du voyage de destination (ex: destinationTripId).Préparer un nouvel objet étape en copiant stepToReassign (omettre l' id).Exécuter addDoc pour ajouter cette étape à la sous-collection days du destinationTripId. (Chemin: artifacts/{appId}/users/{userId}/trips/{destinationTripId}/days).Fermer la modale et afficher un showToast("Étape copiée !").Bouton "Déplacer" :Faire la même chose que "Copier".Après le addDoc réussi, exécuter un deleteDoc sur l'étape originale (en utilisant son id et le currentTripId).Fermer la modale et afficher showToast("Étape déplacée !").2. (Amélioration) Permettre l'Édition (Mise à jour)Problème : Actuellement, l'application ne permet que d'Ajouter et Supprimer (pas de Modifier). Si l'utilisateur fait une faute de frappe, il doit supprimer et recréer.Solution :Ajouter un bouton "Modifier" (icône "crayon") sur la carte de l'étape.Au clic, ré-utiliser la modale add-day-modal.Pré-remplir tous les champs de la modale avec les données de l'étape à modifier.Stocker l'ID de l'étape (day.id) (par exemple dans un champ caché <input type="hidden" id="editing-day-id">).Modifier la logique de addDayForm.addEventListener('submit', ...) :Vérifier si le champ editing-day-id a une valeur.Si OUI (Mode Update) : Utiliser setDoc ou updateDoc avec l'ID existant pour mettre à jour l'étape dans Firestore.Si NON (Mode Create) : Utiliser addDoc comme actuellement.